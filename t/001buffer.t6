use v6;
use Test;

use lib 'lib';
use Command::Edit;
use Command::Buffer;

plan 12;

my $text = "The quick brown fox jumped over the lazy dog";

my $buffer = Command::Buffer.new(:$text);
is $buffer.text, $text, 'Retrieving text from a Command::Buffer';

my $fast = "The fast brown fox jumped over the lazy dog";
$buffer.replace-with("fast", 4, 9);
is $buffer.text, $fast, "replace-with correctly modifies text";

my $canine = "The fast brown fox jumped over the lazy canine";
$buffer.replace-with('canine', 40, 43);
is $buffer.text, $canine, "replace-with calls correctly stack";

$buffer.undo;
is $buffer.text, $fast, "undo properly reverts to previous state";

$buffer.undo;
is $buffer.text, $text, "undo properly works through successive calls";

$buffer.redo;
is $buffer.text, $fast, "redo properly re-reverts state of buffer";

$buffer.redo;
is $buffer.text, $canine, "subsequent calls to redo honor the stack";

my $buffer1 = Command::Buffer.new(:$text);
my $fast = Command::Edit.new(
  :buffer($buffer1),
  :replacement('fast'),
  :from(4), :to(9)
);
my $my = Command::Edit.new(
  :buffer($buffer1),
  :replacement('My'),
  :from(0), :to(3)
);

nok $fast.is-before($my), "proper handling of edit not before another";
ok $my.is-before($fast), "properly handles an edit that is before another";

my $e1 = $my.prepended-with($fast);
is [$e1.from, $e1.to], [0, 3], 'prepended-with returns invocant if is-before';
my $e2 = $fast.prepended-with($my);
is [$e2.from, $e2.to], [3, 8], 'prepended-with returns new changed edit if not is-before';

my $buffer2 = Command::Buffer.new(:$text);
$buffer2.replace-with('fast', 4, 9);
$buffer2.undo();
$buffer2.replace-with('My', 0, 3);
$buffer2.redo();
my $my-fast = 'My fast brown fox jumped over the lazy dog';
is $buffer2.text, $my-fast, 'replace-with properly prepends future edits';

# vim: set ft=perl6:
